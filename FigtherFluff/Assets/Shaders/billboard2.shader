Shader "Custom/BillboardY" {
	Properties{
		_Color("Main Color", Color) = (1, 1, 1, 1)
		_MainTex("Base (RGB) Trans (A)", 2D) = "white" {}
	_BumpMap("Normalmap", 2D) = "bump" {}
	_Cutoff("Alpha cutoff", Range(0, 1)) = 0.5
	}

		SubShader{
		Tags
	{
		"Queue" = "Transparent"
		"IgnoreProjector" = "True"
		"RenderType" = "TransparentCutout"
		"DisableBatching" = "True"
	}
		LOD 100

		CGPROGRAM
#pragma vertex vert
#pragma surface surf Lambert alphatest:_Cutoff noinstancing addshadow

		struct appdata_t
	{
		float4 vertex : POSITION;
		float3 normal : NORMAL;
		half4 color : COLOR0;
		float2 texcoord : TEXCOORD0;
		float2 texcoord1 : TEXCOORD1;
		float2 texcoord2 : TEXCOORD2;
		float4 tangent : TANGENT;
	};

	sampler2D _MainTex;
	sampler2D _BumpMap;
	fixed4 _Color;

	struct Input {
		float2 uv_MainTex;
		float2 uv_BumpMap;
	};

	void Billboard(inout appdata_t v)
	{
		const float3 local = float3(v.vertex.x, v.vertex.y, 0); // this is the quad verts as generated by MakeMesh.cs in the localPos list.
		const float3 offset = v.vertex.xyz - local;
		const float3 upVector = half3(0, 1, 0);
		const float3 forwardVector = -UNITY_MATRIX_IT_MV[2].xyz; // camera forward
		const float3 rightVector = normalize(cross(forwardVector, upVector));
		float3 position = 0;
		position += local.x * rightVector;
		position += local.y * upVector;
		position += local.z * forwardVector;
		v.vertex = float4(offset + position, 1);
		v.normal = -forwardVector;
	}

	void vert(inout appdata_t v, out Input o)
	{
		UNITY_INITIALIZE_OUTPUT(Input, o);
		Billboard(v);
	}


	float hash(float n)
	{
		return frac(sin(n)*43758.5453);
	}

	float noise(float3 x)
	{
		// The noise function returns a value in the range -1.0f -> 1.0f

		float3 p = floor(x);
		float3 f = frac(x);

		f = f * f*(3.0 - 2.0*f);
		float n = p.x + p.y*57.0 + 113.0*p.z;

		return lerp(lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
			lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
			lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
				lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
	}

	void surf(Input IN, inout SurfaceOutput o) {
		float2 uv = float2(IN.uv_MainTex);
		uv.x += (noise(uv.y + 5 * round(_Time * 2))) * 0.02;
		uv.y += (noise(uv.x + 5 * round(_Time * 2))) * 0.02;
		fixed4 c = tex2D(_MainTex, uv) * _Color;

		o.Albedo = c.rgb;
		o.Alpha = c.a;
		o.Normal = UnpackNormal(tex2D(_BumpMap, IN.uv_BumpMap));
	}

	ENDCG
	}
}